from dataclasses import dataclass
from ipaddress import IPv4Address
from os.path import dirname
from typing import Iterator, Tuple

from pysnmp.hlapi import (
    CommunityData,
    ContextData,
    ObjectIdentity,
    ObjectType,
    SnmpEngine,
    UdpTransportTarget,
    getCmd,
    setCmd,
)
from pysnmp.proto.errind import ErrorIndication, requestTimedOut
from pysnmp.smi import builder


class SNMPRequestTimedOut(Exception):
    pass


@dataclass
class SNMPResult:
    errorIndication: ErrorIndication  # True value indicates SNMP engine error
    errorStatus: str  # True value indicates SNMP PDU error
    errorIndex: int  # If nonzero, PDU error index for varBinds[errorIndex-1]
    varBinds: Tuple[ObjectType]  # MIB variables returned in SNMP response


class SNMPClient:
    def __init__(self):
        self._engine = SnmpEngine()

        mib_builder = self._engine.getMibBuilder()
        mib_builder.addMibSources(builder.DirMibSource(dirname(__file__)))

    def set_command(
        self,
        target_ip: IPv4Address,
        command_name: str,
        community_string: str,
        command: str,
    ):
        """
        Sets a command with the given name in the MIB table

        :param target_ip: The IP address of the target
        :param command_name: The name of the command to set
        :param community_string: The community string to use
        :param command: The command to set
        :raises SNMPRequestTimedOut: If the request times out
        :raises: Exception if the command failed
        """
        cmd = setCmd(
            self._engine,
            CommunityData(community_string),
            UdpTransportTarget((str(target_ip), 161)),
            ContextData(),
            ObjectType(
                ObjectIdentity("NET-SNMP-EXTEND-MIB", "nsExtendStatus", f'"{command_name}"'),
                "createAndGo",
            ),
            ObjectType(
                ObjectIdentity("NET-SNMP-EXTEND-MIB", "nsExtendCommand", f'"{command_name}"'),
                "/bin/sh",
            ),
            ObjectType(
                ObjectIdentity("NET-SNMP-EXTEND-MIB", "nsExtendArgs", f'"{command_name}"'),
                command,
            ),
        )
        self._dispatch(cmd)

    def execute_command(self, target_ip: IPv4Address, command_name: str, community_string: str):
        """
        Executes the command with the given name. The command must have been set previously

        :param target_ip: The IP address of the target
        :param command_name: The name of the command to clear
        :param community_string: The community string to use
        :raises SNMPRequestTimedOut: If the request times out
        :raises: Exception if the command failed
        """
        # Other potential NET-SNMP-EXTEND-MIB options:
        # - nsExtendStatus
        # - nsExtendOutput1Line
        # - nsExtendOutputFull
        # - nsExtendOutNumLines
        # - nsExtendOutLine
        cmd = getCmd(
            self._engine,
            CommunityData(community_string),
            UdpTransportTarget((str(target_ip), 161)),
            ContextData(),
            ObjectType(ObjectIdentity("NET-SNMP-EXTEND-MIB", "nsExtendNumEntries", 0)),
            ObjectType(
                ObjectIdentity("NET-SNMP-EXTEND-MIB", "nsExtendCommand", f'"{command_name}"')
            ),
            ObjectType(ObjectIdentity("NET-SNMP-EXTEND-MIB", "nsExtendArgs", f'"{command_name}"')),
            ObjectType(ObjectIdentity("NET-SNMP-EXTEND-MIB", "nsExtendInput", f'"{command_name}"')),
            ObjectType(
                ObjectIdentity("NET-SNMP-EXTEND-MIB", "nsExtendResult", f'"{command_name}"')
            ),
        )
        self._dispatch(cmd)

    def clear_command(self, target_ip: IPv4Address, command_name: str, community_string: str):
        """
        Clears the command with the given name from the MIB table. The command must have been set
        previously

        :param target_ip: The IP address of the target
        :param command_name: The name of the command to clear
        :param community_string: The community string to use
        :raises SNMPRequestTimedOut: If the request times out
        :raises: Exception if the command failed
        """
        cmd = setCmd(
            self._engine,
            CommunityData(community_string),
            UdpTransportTarget((str(target_ip), 161)),
            ContextData(),
            ObjectType(
                ObjectIdentity("NET-SNMP-EXTEND-MIB", "nsExtendStatus", f'"{command_name}"'),
                "destroy",
            ),
        )
        self._dispatch(cmd)

    def _dispatch(self, command_iterator: Iterator[Tuple]):
        result = SNMPResult(*next(command_iterator))

        if result.errorIndication:
            if result.errorIndication == requestTimedOut:
                raise SNMPRequestTimedOut(str(requestTimedOut))
            raise result.errorIndication
        elif result.errorStatus:
            raise Exception(f"Failed to execute command: {result.errorStatus}")
