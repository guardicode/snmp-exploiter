import sys
from dataclasses import dataclass
from ipaddress import IPv4Address
from itertools import repeat
from os.path import dirname
from typing import Callable, Collection
from unittest.mock import MagicMock

import pytest
from snmp_exploiter.snmp_client import SNMPClient, SNMPRequestTimedOut
from pysnmp.hlapi import ObjectIdentity, ObjectType
from pysnmp.proto.errind import requestTimedOut
from pysnmp.smi import builder, view

PLUGIN_SRC_PATH = dirname(  # type: ignore
    sys.modules["snmp_exploiter.snmp_client"].__file__
)
TIMED_OUT_RESULT = (requestTimedOut, 0, 0, ())
ENGINE_ERROR_RESULT = ("failed", 1, 0, ())
PDU_ERROR_RESULT = ("", 1, 0, ())
SUCCESSFUL_RESULT = (None, 0, 0, ())
COMMAND = "echo test"
COMMAND_NAME = "command0"
COMMUNITY_STRING = "community"
HOST_IP = IPv4Address("1.1.1.1")


@pytest.fixture
def mock_snmp_get() -> MagicMock:
    get = MagicMock()
    get.return_value = repeat(SUCCESSFUL_RESULT)
    return get


@pytest.fixture
def mock_snmp_set() -> MagicMock:
    set = MagicMock()
    set.return_value = repeat(SUCCESSFUL_RESULT)
    return set


@pytest.fixture
def snmp_client(monkeypatch, mock_snmp_get, mock_snmp_set) -> Callable[[], MagicMock]:
    monkeypatch.setattr("snmp_exploiter.snmp_client.getCmd", mock_snmp_get)
    monkeypatch.setattr("snmp_exploiter.snmp_client.setCmd", mock_snmp_set)
    return SNMPClient()


@dataclass
class ExpectedMIBSymbol:
    mib: str
    var: str
    data: str


@pytest.fixture
def mib_view_controller() -> view.MibViewController:
    mibBuilder = builder.MibBuilder()
    mibBuilder.addMibSources(builder.DirMibSource(PLUGIN_SRC_PATH))
    return view.MibViewController(mibBuilder)


@pytest.fixture
def get_called_mib_symbols(mib_view_controller):
    def inner(call_args_list) -> Collection[ExpectedMIBSymbol]:
        called_mib_symbols = []
        for call_args in call_args_list:
            for arg in call_args[0]:
                if isinstance(arg, ObjectType):
                    arg.resolveWithMib(mib_view_controller)
                    object, data = arg
                    mib, var, _ = object.getMibSymbol()
                    called_mib_symbols.append(ExpectedMIBSymbol(mib, var, str(data)))
                    print(f"mib: {mib}, var: {var}, data: {data}")
        return called_mib_symbols

    return inner


def test_set_command__registers_command(
    mock_snmp_set, snmp_client: SNMPClient, get_called_mib_symbols
):
    expected_mib_symbols = [ExpectedMIBSymbol("NET-SNMP-EXTEND-MIB", "nsExtendArgs", COMMAND)]

    snmp_client.set_command(HOST_IP, COMMAND_NAME, COMMUNITY_STRING, COMMAND)

    assert mock_snmp_set.called
    called_mib_symbols = get_called_mib_symbols(mock_snmp_set.call_args_list)
    for symbol in expected_mib_symbols:
        assert symbol in called_mib_symbols


@pytest.mark.parametrize(
    "return_value", [iter([ENGINE_ERROR_RESULT]), iter([PDU_ERROR_RESULT]), iter([])]
)
def test_exception_raised_on_failure(mock_snmp_set, mock_snmp_get, return_value, snmp_client):
    mock_snmp_set.return_value = return_value
    mock_snmp_get.return_value = return_value

    with pytest.raises(Exception):
        snmp_client.set_command(HOST_IP, COMMAND_NAME, COMMUNITY_STRING, COMMAND)
    with pytest.raises(Exception):
        snmp_client.execute_command(HOST_IP, COMMAND_NAME, COMMUNITY_STRING)
    with pytest.raises(Exception):
        snmp_client.clear_command(HOST_IP, COMMAND_NAME, COMMUNITY_STRING)


def test_snmp_error_raised_on_request_timeout(mock_snmp_set, mock_snmp_get, snmp_client):
    mock_snmp_set.return_value = repeat(TIMED_OUT_RESULT)
    mock_snmp_get.return_value = repeat(TIMED_OUT_RESULT)
    with pytest.raises(SNMPRequestTimedOut):
        snmp_client.set_command(HOST_IP, COMMAND_NAME, COMMUNITY_STRING, COMMAND)
    with pytest.raises(SNMPRequestTimedOut):
        snmp_client.execute_command(HOST_IP, COMMAND_NAME, COMMUNITY_STRING)
    with pytest.raises(SNMPRequestTimedOut):
        snmp_client.clear_command(HOST_IP, COMMAND_NAME, COMMUNITY_STRING)


def test_get_system_name__returns_system_name(
    mock_snmp_get, snmp_client, mib_view_controller, get_called_mib_symbols
):
    expected_name = "test"
    expected_mib_symbols = [ExpectedMIBSymbol("SNMPv2-MIB", "sysName", "")]
    mock_snmp_get.return_value = iter(
        [
            (
                None,
                0,
                0,
                (
                    ObjectType(
                        ObjectIdentity("SNMPv2-MIB", "sysName", 0),
                        expected_name,
                    ).resolveWithMib(mib_view_controller),
                ),
            )
        ]
    )

    name = snmp_client.get_system_name(HOST_IP, COMMUNITY_STRING)

    assert mock_snmp_get.called
    called_mib_symbols = get_called_mib_symbols(mock_snmp_get.call_args_list)
    for symbol in expected_mib_symbols:
        assert symbol in called_mib_symbols
    assert name == expected_name
